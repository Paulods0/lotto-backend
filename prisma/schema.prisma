generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String              @id @default(uuid())
  first_name           String
  last_name            String
  email                String              @unique
  password             String
  role                 UserRole
  created_at           DateTime            @default(now())
  reset_password_token ResetPasswordToken?

  @@map("users")
}

model Agent {
  id               String      @id @default(uuid())
  id_reference     Int?        @unique
  first_name       String
  last_name        String
  genre            Genre
  phone_number     Int?
  afrimoney_number Int?
  agent_type       AgentType
  bi_number        String?
  status           AgentStatus @default(pendente)
  created_at       DateTime    @default(now())
  area_id          Int?
  city_id          Int?
  type_id          Int?
  zone_id          Int?
  province_id      Int?
  subtype_id       Int?
  area             Area?       @relation(fields: [area_id], references: [id])
  city             City?       @relation(fields: [city_id], references: [id])
  province         Province?   @relation(fields: [province_id], references: [id])
  subtype          Subtype?    @relation(fields: [subtype_id], references: [id])
  type             Type?       @relation(fields: [type_id], references: [id])
  zone             Zone?       @relation(fields: [zone_id], references: [id])

  terminal Terminal?
  pos      Pos?

  @@map("agents")
}

model Terminal {
  id           String    @id @default(uuid())
  id_reference Int?      @unique
  serial       String
  pin          Int?
  puk          Int?
  status       Boolean   @default(false)
  agent_id     String?   @unique
  created_at   DateTime  @default(now())
  sim_card     Int
  area_id      Int?
  city_id      Int?
  province_id  Int?
  zone_id      Int?
  agent        Agent?    @relation(fields: [agent_id], references: [id])
  area         Area?     @relation(fields: [area_id], references: [id])
  city         City?     @relation(fields: [city_id], references: [id])
  province     Province? @relation(fields: [province_id], references: [id])
  zone         Zone?     @relation(fields: [zone_id], references: [id])

  @@map("terminals")
}

model Pos {
  id           String          @id @default(uuid())
  id_reference Int?            @unique
  latitude     Float
  longitude    Float
  agent_id     String?         @unique
  licence_id   String?         @unique
  created_at   DateTime        @default(now())
  admin_id     Int?
  area_id      Int?
  province_id  Int?
  subtype_id   Int?
  type_id      Int?
  zone_id      Int?
  city_id      Int?
  admin        Administration? @relation(fields: [admin_id], references: [id])
  agent        Agent?          @relation(fields: [agent_id], references: [id])
  area         Area?           @relation(fields: [area_id], references: [id])
  city         City?           @relation(fields: [city_id], references: [id])
  licence      Licence?        @relation(fields: [licence_id], references: [id])
  province     Province?       @relation(fields: [province_id], references: [id])
  subtype      Subtype?        @relation(fields: [subtype_id], references: [id])
  type         Type?           @relation(fields: [type_id], references: [id])
  zone         Zone?           @relation(fields: [zone_id], references: [id])

  @@map("pos")
}

model Licence {
  id            String    @id @default(uuid())
  number        String
  description   String
  creation_date DateTime? @default(now())
  file          String?
  created_at    DateTime  @default(now())
  latitude      Float?
  longitude     Float?
  reference     String
  admin_id      Int?

  admin Administration? @relation(fields: [admin_id], references: [id])
  pos   Pos?

  @@map("licences")
}

model Administration {
  name     String
  id       Int       @id @default(autoincrement())
  licences Licence[]
  pos      Pos[]

  @@map("administrations")
}

model Province {
  name      String     @unique
  id        Int        @id @default(autoincrement())
  agents    Agent[]
  cities    City[]
  pos       Pos[]
  terminals Terminal[]

  @@map("provinces")
}

model City {
  name        String     @unique
  id          Int        @id @default(autoincrement())
  province_id Int
  agents      Agent[]
  province    Province   @relation(fields: [province_id], references: [id])
  pos         Pos[]
  terminals   Terminal[]

  @@map("cities")
}

model Area {
  name      String     @unique
  id        Int        @id @default(autoincrement())
  agents    Agent[]
  pos       Pos[]
  terminals Terminal[]
  zones     Zone[]

  @@map("areas")
}

model Zone {
  number    Int        @unique
  id        Int        @id @default(autoincrement())
  area_id   Int
  agents    Agent[]
  pos       Pos[]
  terminals Terminal[]
  area      Area       @relation(fields: [area_id], references: [id])

  @@map("zones")
}

model Type {
  name     String
  id       Int       @id @default(autoincrement())
  agents   Agent[]
  pos      Pos[]
  subtypes Subtype[]

  @@map("types")
}

model Subtype {
  name    String
  id      Int     @id @default(autoincrement())
  type_id Int
  agents  Agent[]
  pos     Pos[]
  type    Type    @relation(fields: [type_id], references: [id])

  @@map("subtypes")
}

model AuditLog {
  id         String   @id @default(uuid())
  entity     String
  entity_id  String?
  user_id    String?
  user_name  String
  action     String
  metadata   Json
  created_at DateTime @default(now())

  @@map("audit_logs")
}

model IdReference {
  id      Int       @id @default(autoincrement())
  counter Int       @default(autoincrement())
  type    AgentType @unique

  @@map("id_referecences")
}

model ResetPasswordToken {
  id         String   @id @default(uuid())
  token      String   @unique
  expires_at DateTime
  created_at DateTime @default(now())
  user_id    String   @unique
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

enum AgentType {
  lotaria_nacional
  revendedor
}

enum Genre {
  masculino
  feminino
}

enum AgentStatus {
  ativo
  inativo
  pendente
}

enum UserRole {
  dev
  super_admin
  area_manager
  supervisor
}
